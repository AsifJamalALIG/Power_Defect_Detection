import os
import random
import cv2
import matplotlib.pyplot as plt
from ultralytics import YOLO

# Load the best weights from your trained YOLO model
model_path = ("path to your downloaded best.pt")
model = YOLO(model_path)

# Path to your test images folder
test_folder_path = "path to the folder od images"  # Adjust this path
image_paths = [os.path.join(test_folder_path, img) for img in os.listdir(test_folder_path) if img.endswith(('.png', '.jpg', '.jpeg'))]

# Select 40 random images from the test folder
selected_images = random.sample(image_paths, min(40, len(image_paths)))  # Safeguard against fewer than 40 images

# Function to perform inference on an image and display it using Matplotlib
def predict_image(image_path):
    # Load the image
    image = cv2.imread(image_path)

    # Perform inference
    results = model.predict(image)

    # Assuming the first result corresponds to the first image
    result = results[0]  # Get the first result

    # Convert the image from BGR to RGB
    result_image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)  # Convert BGR to RGB

    # Draw bounding boxes on the result image
    for box in result.boxes:  # Access the bounding boxes
        x1, y1, x2, y2 = map(int, box.xyxy[0])  # Extract box coordinates
        cv2.rectangle(result_image, (x1, y1), (x2, y2), (255, 0, 0), 2)  # Draw the box in red

    # Display the result using Matplotlib
    plt.figure(figsize=(10, 10))
    plt.imshow(result_image)  # Display the image with detections
    plt.axis('off')  # Hide axis
    plt.show()  # Show the image

# Run inference on the selected images
for img_path in selected_images:
    predict_image(img_path)

